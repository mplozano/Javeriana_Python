#Parcial 2

#Punto a
"""Construya una función en Python que reciba un argumento que corresponde a una cadena de texto que puede
ser una cadena de ADN, de ARN o ninguna de las anteriores, la función deberá retornar 1 si el argumento
corresponde a una cadena de ADN, 2 si es ARN o -1 si es algo diferente a las opciones anteriores.

Requerimientos:
  •	Prototipo: def determineHelix(string).
  •	La función recibe un solo argumento: “string”.
  •	Si el argumento ingresado es diferente a un str, la función deberá retornar -1.
  •	Si el argumento ingresado es un str vacío, la función deberá retornar -1.
  •	La función deberá determinar si el texto ingresado es una cadena de ADN o ARN.
  •	Si el texto ingresado corresponde a una cadena de ADN, la función deberá retornar 1.
  •	Si el texto ingresado corresponde a una cadena de ARN, la función deberá retornar 2.
  •	Si el texto ingresado no corresponde a una cadena de ADN o a una cadena de ARN, la función deberá retornar -1."""

def determineHelix(string):
    """Función que identifica si el string entregado corresponde a una
    cadena de ADN, ARN u otra cosa.
    Argumentos:
        string[str]: cadena de texto.
    Retorno:
        1[int]: Si el argumento corresponde a una cadena de ADN.
        2[int]: Si el argumento corresponde a una cadena de ARN.
        -1[int]: Si el argumento no es [str], si el argumento es un [str] vacío
        o si "string" no es cadena de ADN o ARN.
        """
    #Verificaciones
    if type(string) != str:
        return -1
    if len(string) == 0:
        return -1
    #Procedimiento
    charValidos=["A","T","C","G","U"] #Lista char validos
    for char in string:
        if char not in charValidos: #not in identifica si char esta en la lista charValidos
            return -1
        else:
            continue #Aunque encuentre uno que este en charValidos va a revisar todos los char
    if "U" in string: #Si tiene uracilo es ARN
        return 2
    else: #Si no lo tiene es ADN
        return 1

print(determineHelix("ATTGCGAT"))

#-----------------------------------------------
#Punto b

"""Construya una función en Python que recorra una lista de cadenas de texto; la función deberá contar todas 
las bases nitrogenadas solamente de los elementos que correspondan a cadenas de ADN.

Requerimientos:
  •	Prototipo de la función: def countDNA(stringList).
  •	La función recibe un argumento “stringList” que corresponde a una lista de cadenas de texto (str), 
    dichas cadenas de texto ser o no ser cadenas de ADN.
  •	La función deberá contar el total de las bases nitrogenadas SOLAMENTE de los elementos que correspondan
    a cadenas de ADN.
  •	Si el elemento de la lista no corresponde a una cadena de ADN, la función deberá ignorarla.
  •	La función deberá retornar una lista que contenga la cantidad de bases de Adenina, Guanina, Timina y Citocina 
    respectivamente."""

def countDNA(stringList):
    """Función que encuentra dentro de una lista de [str] cuales son cadenas de ADN y cuenta
    cuanta cantidad hay de cada base nitrigenada en solo esas cadenas de texto.
    Argumentos:
        stringList[list]: Lista que contiene varias cadenas de texto, pueden ser de ADN o no.
    Retorno:
        [list]: Retorna una lista con la cantidad de Adenina, Guanina, Timina y Citocina, 
        en ese orden."""
    conA=0 #Contadores
    conT=0
    conC=0
    conG=0
    for elem in stringList:
        if "A" not in elem or "T" not in elem or "C" not in elem or "G" not in elem: #Sacamos el no ADN
            continue #Ignoramos la cadenas que no son ADN
        else: #Si es ADN empezamos a contar bases
            for char in elem:
                if char == "A":
                    conA+=1
                elif char == "T":
                    conT+=1
                elif char == "C":
                    conC+=1
                elif char == "G":
                    conG+=1
    listnBases=[conA,conG,conT,conC] #Lista de retorno
    return listnBases

print(countDNA(["ARROZ","HABICHUELAS","ATTCGGAT","AUUGCGU","AGCTAGCT","YO"]))

#----------------------------------------



