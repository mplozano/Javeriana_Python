#Taller 1
#-------------------------------------------
#Punto 1
"""[1]	Construya una función que reciba una lista como argumento, la función deberá recorrer la lista que corresponde 
a los Kg de contaminación ambiental en algunas ciudades del valle. La función deberá retornar una lista con la posición
en la que se encuentra la ciudad con mayor contaminación ambiental. En caso de que existan dos o más ciudades con el 
mismo valor más alto de contaminación, se deberá anexar sus posiciones en orden de aparición.
Requerimientos:
•	Prototipo de la función: def mostContaminated(city_list).
•	La función recibe un solo argumento “city_list”, este argumento debe ser verificado, en caso de que no
sea una lista, la función deberá retornar -1. Cada uno de los elementos de la lista representa la 
contaminación ambiental de algunas ciudades del valle en Kilogramos, cada valor deberá ser verificado, 
en caso de que su tipo sea diferente a un número, deberá ser ignorado.
•	La función deberá retornar una lista con las posiciones de la ciudad en el argumento que tenga la mayor
cantidad de contaminación.
•	EJ:
o	Argumento: [23, 43, "Hola", 1] → Retorno: [1]
o	Argumento: [23, 43, "Casa", 43] → Retorno: [1, 3]
o	Argumento: [23, 43, "Hola", 43, "55"] → Retorno: [1, 3]"""

def mostContaminated(city_list):
    """Función que recibe una lista con los kg de contaminación de ciudades y retorna
    cual de estas es la más contaminada.
        Argumentos: Lista, donde cada posición representa una ciudad diferente y
        cada valor es kg de contaminación.
        Retorno: Lista, el o los elementos representan la ciudad/es con más 
        contaminación (Mayor valor númerico)."""
    if type(city_list) != list: #Verificación si el argumeto es lista
        return -1
    index_maximo=[] #lista que guardará el index del mayor valor
    maximo= -1 #Contador que cambia al mayor valor, es -1 para que siempre tome el primer valor de la lista 
    for i in range(len(city_list)): #For para sacar el número mayor
        try: #creamos una excepción para que ignore el elemento que no es int o float
            if city_list[i] > maximo:
                maximo=city_list[i]
        except TypeError:
            continue
    for i in range(len(city_list)): #For para crear la lista de index
        try: #Lo mismo que el anterior
            if city_list[i]==maximo:
                index_maximo.append(i)
        except TypeError:
            continue
    return index_maximo

print(mostContaminated([23, 43, "Hola", 43, "55"]))

#----------------------------------------------------
#Punto 2
"""[2]	Construya una función en Python que recorra una cadena de texto que representa una hélice de ADN, 
cuente la cantidad de bases nitrogenadas por cada tipo y retorne una lista que contenga la cantidad de bases 
nitrogenadas en la cadena de texto por cada tipo.

Requerimientos:
    •	Prototipo de la función: def countDNA(dna_string).
    •	La función recibe un solo argumento: “adn_string” representa una hélice de ADN y debe ser verificado: 
        si su tipo es diferente a string, la función deberá retornar -1; en caso contrario, el argumento siempre 
        contiene combinaciones de los caracteres “A”, “G”, “T”, “C” y puede ser de cualquier longitud.
    •	La función debe contar cuantos elementos existen de cada base nitrogenada.
    •	La función debe mostrar en pantalla la cantidad de elementos de cada base nitrogenada.
    •	La función debe mostrar la cantidad total de bases nitrogenadas en pantalla.
    •	La función debe retornar una lista que contenga la cantidad de cada una de las bases nitrogenadas en
        la cadena de ADN con la siguiente estructura:
            o	bases_list = [cantidad_A, cantidad_T, cantidad_C, cantidad_G]"""

def countDNA(dna_string):
    """Recorre una cadena de ADN y cuenta cuantas bases hay por cada tipo
    (A,T,C,G).
    Argumentos: str, Cadena de texto que representa una cadena de ADN.
    Retorno: list, Una lista con la cantidad de bases por cada tipo en 
    orden A, T, C, G."""
    if type(dna_string) != str: #verificación si es arg es str
        return -1
    contaA=0 #Contadores de bases
    contaT=0
    contaC=0
    contaG=0
    contaTotal=0 #Contador total de bases
    for i in dna_string:
        if i == "A" or i == "a":
            contaA+=1
            contaTotal+=1
        elif i == "T" or i == "t":
            contaT+=1
            contaTotal+=1
        elif i == "C" or i == "c":
            contaC+=1
            contaTotal+=1
        elif i == "G" or i == "g":
            contaG+=1
            contaTotal+=1
    print("Cantidad de Adenina:", contaA)
    print("Cantidad de Timina:",contaT)
    print("Cantidad de Citocina:", contaC)
    print("Cantidad de Guanina:", contaG)
    print("Cantidad total de bases nitrogenadas:", contaTotal)
    bases_list=[contaA,contaT,contaC,contaG]
    return bases_list

print(countDNA("ATCGAAATTTCCGA"))

#-----------------------------------------------
#Punto 3

"""Construya una función en Python que reciba dos argumentos, el primero corresponde a una cadena de texto
que corresponde a una hélice de ADN y el segundo corresponde a un patrón. La función deberá retornar un número
decimal que corresponde al porcentaje de parecido entre la cadena de ADN y el patrón.

Requerimientos
    •	Prototipo de la Función: def compareADN(dna_helix, dna_pattern).
    •	La función recibe dos argumentos.
    •	El primer argumento “dna_helix” siempre va a ser una cadena de texto que estará compuesta 
        por distintas combinaciones de los caracteres “A”, “T”, “G”, “C”.
    •	El segundo argumento “dna_pattern” tiene características similares al primer argumento.
    •	Si la cadena de ADN está vacía o la longitud del patrón es igual a cero, la función 
        deberá retornar -1.
    •	Si la longitud de la cadena de ADN es diferente a la longitud del patrón, su parecido 
        será del 0%.
    •	La función deberá recorrer cada uno de los caracteres de la cadena de ADN en el primer 
        argumento y deberá compararlos con cada uno de los caracteres del patrón para determinar 
        su parecido.
    •	La función deberá retornar el parecido entre la lista de ADN y el patrón."""

def compareADN(dna_helix, dna_pattern):
    """Función que compara una cadena de ADN con una cadena molde, su resultado
    es el porcentaje de cuan parecido son ambas cadenas.
        Argumentos: 2 str, el primer string representa la cadena de ADN a comparar
        y el segundo la cadena molde con la que sera comparada.
        Retorno: float, porcentaje de parecido de ambas cadenas.
        """
    porcentaje=0 #variable que contendra el float del retorno
    #verificaciones
    if len(dna_helix)==0:
        return -1
    if len(dna_helix)!=len(dna_pattern): #si las cadenas son de la misma longitud
        porcentaje=0.00
        return porcentaje
    parecido=0 #Variable que contara las coincidencias
    for i in range(0,len(dna_helix)): #se mueva el index en un rango de 0 a la longitud de las cadenas
        if dna_helix[i] == dna_pattern[i]: #comparación caracteres de los index recorridos
            parecido+=1
    porcentaje=(parecido/len(dna_helix))
    return porcentaje

print(compareADN("ATTTGCAAATTA","ATTTGCAAATTA"))

#----------------------------------------------
#Punto 4

"""Construya una función en Python que reciba dos argumentos, el primero corresponde a una lista de cadenas
de texto que corresponden a hélices de ADN y el segundo corresponde a un patrón. La función deberá retornar
una lista que contenga las cadenas de ADN complementarias de cada uno de los elementos del primer argumento
que tengan un parecido mayor o igual al 75% con el patrón.

    •	Prototipo de la función: def complement_DNA_list(list_DNA, pattern).
    •	La función recibe 2 argumentos.
    •	El primer argumento deberá ser verificado, si su tipo es diferente a una lista, la función 
        deberá retornar -1.
    •	En caso de que el argumento sea una lista, su contenido puede ser de cualquier tipo; los valores
        tipo cadena de texto contenidos en la lista corresponden a secuencias de ADN; en consecuencia, 
        siempre estarán constituidas por combinaciones de los caracteres “A”, “T”, “C” y “G”.
    •	El segundo argumento deberá ser verificado, si su tipo es diferente a una cadena de texto, 
        la función deberá retornar -2; en caso contrario, siempre será construido con combinaciones
        de los caracteres “A”, “T”, “C” y “G”.
    •	La función deberá almacenar las cadenas de ADN complementarias en la lista complement_list.
    •	La función deberá recorrer cada uno de los elementos de la lista list_DNA y deberá compararlos con el patrón.
        o	Para cada elemento que tenga un parecido mayor o igual al 75% con el patrón, la función deberá
            construir y almacenar en complement_list la cadena de ADN complementaria para cada uno de estos
            elementos.
        o	Si el parecido entre la cadena de ADN a revisar en el argumento list_DNA y el patrón es menor al
            75%, la función deberá almacenar el string “Sin Complemento” en la lista complement_list.
        o	En caso de que el elemento a revisar tenga un tipo diferente a STR, la función deberá almacenar el
            string “No es ADN” en la lista complement_list."""

def compareADN(dna_helix, dna_pattern):
    """Función que compara una cadena de ADN con una cadena molde, su resultado
    es el porcentaje de cuan parecido son ambas cadenas.
        Argumentos: 2 str, el primer string representa la cadena de ADN a comparar
        y el segundo la cadena molde con la que sera comparada.
        Retorno: float, porcentaje de parecido de ambas cadenas.
        """
    porcentaje=0 #variable que contendra el float del retorno
    #verificaciones
    if len(dna_helix)==0:
        return -1
    if len(dna_helix)!=len(dna_pattern): #si las cadenas son de la misma longitud
        porcentaje=0.00
        return porcentaje
    parecido=0 #Variable que contara las coincidencias
    for i in range(0,len(dna_helix)): #se mueva el index en un rango de 0 a la longitud de las cadenas
        if dna_helix[i] == dna_pattern[i]: #comparación caracteres de los index recorridos
            parecido+=1
    porcentaje=(parecido/len(dna_helix))
    return porcentaje

#----------------------------

def complement_DNA_list(list_DNA, pattern):
    """Función que compara cadenas de ADN con una cadena patrón, aquellas con más
    de 0.75 (75%) de parecido a la cadena patrón son convertidas en su cadena complementaria.
        Argumentos: recibe 2 argumentos; el primero es una lista (list), esta contiene
        diferentes cadenas de ADN a evaluar; el segungo es una cadena de texto (str),
        este toma el papel de comparador para las otras cadenas.
        Retorno: lista (list), contiene las cadenas complementarias. Aquellas cadenas
        que no cumplieron los requisitos para convertirlas en su complementaria saldrá
        "Sin complemento" 
        """
    #Verificaciones
    if type(list_DNA) != list:
        return -1
    if type(pattern) != str:
        return -2
    complement_list=[] #lista vacía del retorno
    for elem in list_DNA:
        if compareADN(elem,pattern) >= 0.75: #evaluar el parecido
            complemento="" #contador que contendra la cadena complementaria
            for char in elem:
                if char == "A":
                    char="T"
                    complemento += char
                elif char == "T":
                    char="A"
                    complemento += char
                elif char == "C":
                    char = "G"
                    complemento += char
                elif char == "G":
                    char = "C"
                    complemento += char
            complement_list.append(complemento)
        else:
            complement_list.append("Sin complemento")
    return complement_list

print(complement_DNA_list(["AAGGTTCC","AATTGGTT","ATCGTAGC","AAGTTTCG","AAGGTTCCTTAA"], "AAGGTTCC"))





